---
title: "Shiny Stock Analyzer App"
subtitle: ""
date: 12/15/2023
author: Lucas Okwudishu
title-block-banner: true
format:
  html:
    css: styles.css
    toc: true
    toc-depth: 2
    number-sections: false
    theme: flatly
    code-fold: false
    code-tools: true
    page-layout: article
link-citations: true
categories: [stocks shiny AWS MongoDB Docker]
image: "workflow.png"
---

# Introduction

In data science, the ability to transform complex analysis into interactive, 
user-friendly applications (also known as deployment) is crucial. [R](){target="_blank"},
with its vast ecosystem of packages including [Shiny](){target="_blank"} are important
tools for creating such web applications. However, the journey from a concept to a 
production-grade application involves more than just developing the core analytical
features. It requires a robust architecture that ensures reliability, scalability,
and security. 

This project demonstrates how a combination of cutting-edge technologies can be used
to deploy a stock analysis application that meets these production-grade standards.


# Technologies Used

## Tidyquant: The Analytical Core

[Tidyquant](){target="_blank"}, an R package, is the starting point in our application. 
It provides a comprehensive API for extracting stocks data and performing intricate 
financial analyses. Tidyquant integrates seamlessly with the R ecosystem, bringing financial 
modeling, performance measurement, and risk management capabilities to the table.


## R and Shiny: The Frontend Duo
At the heart of our application's user interface are R and Shiny. These are essential in converting complex data analyses into engaging and interactive visualizations and dashboards. Shiny's reactivity and R's analytical power create a dynamic environment where users can interact with the data in real-time, making it an ideal choice for data science applications.


## Amazon EC2: Scalable Hosting
[Amazon EC2](https://aws.amazon.com/pm/ec2/){target="_blank"} forms the backbone of our application hosting. It offers scalable computing capacity in the cloud, which is crucial for handling varying loads, ensuring that the application remains responsive and available, even during peak usage times.


## MongoDB Atlas: Secure Credential Storage
[MongoDB](https://www.mongodb.com/atlas/database){target="_blank"} Atlas is used for 
managing and storing authentication credentials securely. Its role is critical in maintaining 
the security and integrity of user data, a paramount aspect for any application, 
especially those dealing with sensitive financial information. In addition to storing
user credentials, MongoDB is also used to user settings in the application, allowing 
the user to save stock analysis and retrieve such analysis when the log in later on.


## Docker: Ensuring Consistency through Containerization
[Docker](https://www.docker.com/){target="_blank"} is used to 
[containerize](https://docs.docker.com/guides/walkthroughs/what-is-a-container/) the application, encapsulating it in a package that includes everything needed to run it: code, runtime, system tools, libraries, and settings. Containerization with Docker ensures consistency across various development and deployment environments, streamlining the development and sharing process and mitigating the "it works on my machine" syndrome.


